uniform mat4 ModelMatrix;      // transform model coords to world coords      

varying vec3 v_position_eye;	// the vertex position in eye coords
varying vec3 v_normal_eye;		// the normal in eye coords
varying float waveHeight;
varying float wavePositionX;
varying float wavePositionY;

uniform float TimeShiftX;
uniform float TimeShiftY;

uniform float AmplitudeY;
uniform float AmplitudeX;

uniform float FrequencyY;
uniform float FrequencyX;

uniform float TestShift;
uniform float VecCalcType;

///noise function taken from: http://www.geeks3d.com/20100831/shader-library-noise-and-pseudo-random-number-generator-in-glsl/
#extension GL_EXT_gpu_shader4: enable

uniform float time;

int LFSR_Rand_Gen(in int n)
{
  // <<, ^ and & require GL_EXT_gpu_shader4.
  n = (n << 13) ^ n;
  return (n * (n*n*15731+789221) + 1376312589) & 0x7fffffff;
}

float LFSR_Rand_Gen_f( in int n )
{
  return float(LFSR_Rand_Gen(n));
}

float noise3f(in vec3 p)
{
  ivec3 ip = ivec3(floor(p));
  vec3 u = fract(p);
  u = u*u*(3.0-2.0*u);

	 
 	 int n = ip.x + ip.y*57 + ip.z*113;
	 

  float res = mix(mix(mix(LFSR_Rand_Gen_f(n+(0+57*0+113*0)),
                          LFSR_Rand_Gen_f(n+(1+57*0+113*0)),u.x),
                      mix(LFSR_Rand_Gen_f(n+(0+57*1+113*0)),
                          LFSR_Rand_Gen_f(n+(1+57*1+113*0)),u.x),u.y),
                 mix(mix(LFSR_Rand_Gen_f(n+(0+57*0+113*1)),
                          LFSR_Rand_Gen_f(n+(1+57*0+113*1)),u.x),
                      mix(LFSR_Rand_Gen_f(n+(0+57*1+113*1)),
                          LFSR_Rand_Gen_f(n+(1+57*1+113*1)),u.x),u.y),u.z);

  return 1.0 - res*(1.0/1073741824.0);
}

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main()
{	
	float disp;
	vec4 v = gl_Vertex;
	wavePositionX = v.x;
	wavePositionY = v.y;

    
    float timeFactor = v.y*TimeShiftX;
    float newAmplitudeX = AmplitudeX*sin(TimeShiftX);
    float newAmplitudeY = AmplitudeY*sin(TimeShiftX);
    

		
    
//    vec3 WaveVec = (gl_Normal * disp * 2.0 * AmplitudeX*sin(FrequencyY*v.y+TimeShiftY))+sin( FrequencyY*v.x + TimeShiftY)*AmplitudeY/5. ;


    disp = noise3f(gl_Vertex.xyz/FrequencyX + TimeShiftX);

    vec3 WaveVec = (gl_Normal * disp * AmplitudeX) ;

	waveHeight = WaveVec.z;

	vec3 P = gl_Vertex.xyz + WaveVec;
    
	gl_Position = gl_ModelViewProjectionMatrix * vec4(P, 1.0);
 
	gl_TexCoord[0] = gl_MultiTexCoord0 * gl_TextureMatrix[0];
}






