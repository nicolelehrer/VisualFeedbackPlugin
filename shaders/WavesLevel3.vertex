uniform mat4 ModelMatrix;      // transform model coords to world coords      

varying vec3 v_position_eye;	// the vertex position in eye coords
varying vec3 v_normal_eye;		// the normal in eye coords
varying float waveHeight;
varying float wavePositionX;
varying float wavePositionY;

uniform float TimeShiftX;
uniform float TimeShiftY;

uniform float AmplitudeY;
uniform float AmplitudeX;

varying float ampCheckHack;

uniform float FrequencyY;
uniform float FrequencyX;

uniform float TestShift;

varying float TextureShiftTimer;
uniform float VecCalcType;


///noise function taken from: http://www.geeks3d.com/20100831/shader-library-noise-and-pseudo-random-number-generator-in-glsl/

#extension GL_EXT_gpu_shader4: enable

uniform float time;

int LFSR_Rand_Gen(in int n)
{
  // <<, ^ and & require GL_EXT_gpu_shader4.
  n = (n << 13) ^ n;
  return (n * (n*n*15731+789221) + 1376312589) & 0x7fffffff;
}

float LFSR_Rand_Gen_f( in int n )
{
  return float(LFSR_Rand_Gen(n));
}

float noise3f(in vec3 p)
{
  ivec3 ip = ivec3(floor(p));
  vec3 u = fract(p);
  u = u*u*(3.0-2.0*u);

	 
 	 int n = ip.x + ip.y*57 + ip.z*113;
	 

  float res = mix(mix(mix(LFSR_Rand_Gen_f(n+(0+57*0+113*0)),
                          LFSR_Rand_Gen_f(n+(1+57*0+113*0)),u.x),
                      mix(LFSR_Rand_Gen_f(n+(0+57*1+113*0)),
                          LFSR_Rand_Gen_f(n+(1+57*1+113*0)),u.x),u.y),
                 mix(mix(LFSR_Rand_Gen_f(n+(0+57*0+113*1)),
                          LFSR_Rand_Gen_f(n+(1+57*0+113*1)),u.x),
                      mix(LFSR_Rand_Gen_f(n+(0+57*1+113*1)),
                          LFSR_Rand_Gen_f(n+(1+57*1+113*1)),u.x),u.y),u.z);

  return 1.0 - res*(1.0/1073741824.0);
}

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main()
{	
	float disp;
	vec4 v = gl_Vertex;
	wavePositionX = v.x;
	wavePositionY = v.y;

	ampCheckHack = AmplitudeX;

    vec3 WaveVec;
//    disp = 0.;
    
    float timeFactor;
    float newAmplitudeX;
    float newAmplitudeY;

    
   if (VecCalcType == 3.0) 
    {
        
        disp = noise3f(gl_Vertex.xyz/FrequencyX + TimeShiftX);
        
        WaveVec = (gl_Normal * disp * AmplitudeX) ;
        
        TextureShiftTimer = TimeShiftX/200.; 

    }
    
    
    else
   {
        /*
        if (mod(v.y, FrequencyX) == 0. && mod(v.x, FrequencyX/2.) == 0.) {
            
            disp = noise3f(gl_Vertex.xyz);
        }
        else {   
            disp = noise3f(vec3(v.x-mod(v.x, FrequencyX/2.), v.y-mod(v.y, FrequencyX), v.z));
        }
        
        timeFactor = v.y*TimeShiftX;
        newAmplitudeX = AmplitudeX*sin(TimeShiftX);
        newAmplitudeY = AmplitudeY*sin(TimeShiftX);
        
        WaveVec = (gl_Normal * disp * 2.0 * AmplitudeX*sin(FrequencyY*v.y+TimeShiftY))+sin(FrequencyY*v.x + TimeShiftY)*AmplitudeY/5.
        +sin( FrequencyY*v.y/2. + TimeShiftY)*AmplitudeY/5.+ sin( FrequencyY*v.y/3. + TimeShiftY)*3.*AmplitudeY/5.;

        TextureShiftTimer = TimeShiftX/500.; 

         */
       
       disp = noise3f( gl_Vertex.xyz/100.0 + vec3(TimeShiftX*2.0,0.0,0.0));
       
       float disp2;
       disp2 = noise3f( gl_Vertex.xyz/10.0 + vec3(TimeShiftX*3.0,0.0,0.0) );
       
       float disp3;
       disp3 = noise3f(  gl_Vertex.xyz/2.0 + vec3(TimeShiftX*10.0,0.0,0.0) );
       
       WaveVec = (gl_Normal * disp * AmplitudeX) + (gl_Normal * disp2 * (AmplitudeX / 6.0)) + (gl_Normal * disp3 * (AmplitudeX / 20.0));
       //WaveVec = (gl_Normal * disp2 * (AmplitudeX / 6.0)) ;
       
       
       TextureShiftTimer = TimeShiftX/100.0;

    }
    
    

	waveHeight = WaveVec.z;

	vec3 P = gl_Vertex.xyz + WaveVec;
    

	
	gl_Position = gl_ModelViewProjectionMatrix * vec4(P, 1.0);
 
	gl_TexCoord[0] = gl_MultiTexCoord0 * gl_TextureMatrix[0];
    

    

}






